import { z } from 'zod';

/**
 * Environment configuration values
 */
const MAX_TITLE_LENGTH = parseInt(import.meta.env.VITE_MAX_TITLE_LENGTH) || 100;
const MAX_DESCRIPTION_LENGTH = parseInt(import.meta.env.VITE_MAX_DESCRIPTION_LENGTH) || 200;

/**
 * Zod schema for task status validation
 */
export const TaskStatusSchema = z.enum(['pending', 'done']);

/**
 * Zod schema for validating complete Task objects
 * Ensures all required fields are present and valid with proper length constraints
 */
export const TaskSchema = z.object({
  id: z.string().min(1, 'Task ID is required'),
  title: z.string()
    .min(1, 'Title is required')
    .max(MAX_TITLE_LENGTH, `Title must be less than ${MAX_TITLE_LENGTH} characters`),
  description: z.string()
    .max(MAX_DESCRIPTION_LENGTH, `Description must be less than ${MAX_DESCRIPTION_LENGTH} characters`),
  status: TaskStatusSchema,
});

/**
 * Zod schema for validating new task creation data
 * ID is not required as it will be auto-generated by the server
 */
export const CreateTaskSchema = z.object({
  title: z.string()
    .min(1, 'Title is required')
    .max(MAX_TITLE_LENGTH, `Title must be less than ${MAX_TITLE_LENGTH} characters`)
    .transform(str => str.trim()),
  description: z.string()
    .max(MAX_DESCRIPTION_LENGTH, `Description must be less than ${MAX_DESCRIPTION_LENGTH} characters`)
    .transform(str => str.trim())
    .default(''),
});

/**
 * Zod schema for validating task updates
 * All fields are optional for partial updates
 */
export const UpdateTaskSchema = z.object({
  title: z.string()
    .min(1, 'Title cannot be empty')
    .max(MAX_TITLE_LENGTH, `Title must be less than ${MAX_TITLE_LENGTH} characters`)
    .transform(str => str.trim())
    .optional(),
  description: z.string()
    .max(MAX_DESCRIPTION_LENGTH, `Description must be less than ${MAX_DESCRIPTION_LENGTH} characters`)
    .transform(str => str.trim())
    .optional(),
});

/**
 * TypeScript types inferred from Zod schemas
 */
export type TaskStatus = z.infer<typeof TaskStatusSchema>;
export type Task = z.infer<typeof TaskSchema>;
export type CreateTaskData = z.infer<typeof CreateTaskSchema>;
export type UpdateTaskData = z.infer<typeof UpdateTaskSchema>;

/**
 * Validation utilities for client-side form validation
 */
export const validateCreateTask = (data: unknown) => CreateTaskSchema.safeParse(data);
export const validateUpdateTask = (data: unknown) => UpdateTaskSchema.safeParse(data);
export const validateTask = (data: unknown) => TaskSchema.safeParse(data);